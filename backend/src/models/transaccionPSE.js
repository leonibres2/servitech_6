// ===============================
// üìÑ MODELO DE TRANSACCI√ìN PSE
// Este archivo define el esquema y modelo de Mongoose para registrar y gestionar
// las transacciones realizadas a trav√©s de la pasarela PSE (ACH Colombia).
// Cada campo, middleware e √≠ndice est√° documentado exhaustivamente para explicar
// su prop√≥sito, validaciones y l√≥gica asociada.
// ===============================

// Importa el m√≥dulo mongoose para interactuar con MongoDB usando esquemas y modelos
const mongoose = require("mongoose");

// Definici√≥n del esquema principal de la transacci√≥n PSE
const transaccionPSESchema = new mongoose.Schema({
  // ===============================
  // üîë Referencia √∫nica de la transacci√≥n
  // Identificador √∫nico generado por el sistema para cada transacci√≥n PSE.
  // Es requerido y no puede repetirse en la colecci√≥n.
  reference: {
    type: String, // Almacena el identificador √∫nico de la transacci√≥n
    required: true, // Es obligatorio para identificar la transacci√≥n
    unique: true, // Garantiza unicidad en la base de datos
  },

  // ===============================
  // üè¶ ID de la transacci√≥n en ACH Colombia
  // Identificador √∫nico asignado por ACH Colombia (puede ser nulo hasta que la transacci√≥n sea procesada)
  achTransactionId: {
    type: String, // Almacena el ID retornado por ACH
    unique: true, // No puede repetirse
    sparse: true, // Permite que el campo sea nulo en algunos documentos
  },

  // ===============================
  // üë§ Informaci√≥n b√°sica del usuario que realiza la transacci√≥n
  userEmail: { type: String, required: true }, // Correo electr√≥nico del usuario (obligatorio para notificaciones y trazabilidad)
  userName: { type: String }, // Nombre del usuario (opcional, para mostrar en reportes o logs)
  userPhone: { type: String }, // Tel√©fono del usuario (opcional, para contacto o validaci√≥n)

  // ===============================
  // üè¶ Informaci√≥n bancaria PSE del usuario
  bankCode: { type: String, required: true }, // C√≥digo del banco seleccionado por el usuario (obligatorio para la transacci√≥n)
  personType: { type: String, enum: ["N", "J"], default: "N" }, // Tipo de persona: 'N' (natural) o 'J' (jur√≠dica), por defecto natural
  documentType: {
    type: String,
    enum: ["CC", "CE", "TI", "NIT", "PP"],
    default: "CC",
  }, // Tipo de documento: c√©dula, extranjer√≠a, etc.
  documentNumber: { type: String, required: true }, // N√∫mero de documento del usuario (obligatorio)

  // ===============================
  // üí∞ Informaci√≥n del pago realizado
  amount: { type: Number, required: true }, // Monto de la transacci√≥n (obligatorio)
  currency: { type: String, default: "COP" }, // Moneda de la transacci√≥n, por defecto pesos colombianos
  description: { type: String }, // Descripci√≥n opcional del pago (puede incluir referencia de servicio, etc.)

  // ===============================
  // üåê URLs y redirecciones asociadas al flujo PSE
  pseUrl: { type: String }, // URL de redirecci√≥n a la pasarela PSE (retornada por el API)
  returnUrl: { type: String }, // URL a la que se redirige al usuario tras el pago
  confirmationUrl: { type: String }, // URL para recibir confirmaciones autom√°ticas (webhook)

  // ===============================
  // üîÑ Estado de la transacci√≥n
  // Controla el ciclo de vida de la transacci√≥n: pendiente, aprobada, rechazada, etc.
  status: {
    type: String, // Estado actual de la transacci√≥n
    enum: [
      "PENDING",
      "REDIRECTING",
      "PROCESSING",
      "APPROVED",
      "REJECTED",
      "FAILED",
      "EXPIRED",
      "ERROR",
    ], // Estados posibles
    default: "PENDING", // Valor inicial al crear la transacci√≥n
  },

  // ===============================
  // üì¶ Respuesta completa de ACH Colombia (puede contener datos adicionales)
  achResponse: { type: mongoose.Schema.Types.Mixed }, // Permite almacenar cualquier estructura de respuesta (JSON)

  // ===============================
  // üïí Informaci√≥n de procesamiento y pago
  bankProcessDate: { type: Date }, // Fecha en que el banco proces√≥ la transacci√≥n (opcional)
  paidAt: { type: Date }, // Fecha y hora en que se confirm√≥ el pago (opcional)

  // ===============================
  // üìù Informaci√≥n adicional y mensajes
  webhookMessage: { type: String }, // Mensaje recibido por webhook (puede contener logs o errores)
  errorMessage: { type: String }, // Mensaje de error en caso de fallo
  finalAmount: { type: Number }, // Monto final cobrado (puede diferir por comisiones, etc.)

  // ===============================
  // üß™ Modo de prueba
  testMode: { type: Boolean, default: true }, // Indica si la transacci√≥n fue realizada en modo test/sandbox

  // ===============================
  // üóìÔ∏è Metadatos de auditor√≠a y control
  createdAt: { type: Date, default: Date.now }, // Fecha de creaci√≥n del registro
  lastUpdated: { type: Date, default: Date.now }, // Fecha de √∫ltima actualizaci√≥n (se actualiza por middleware)
});

// ===============================
// üîÑ MIDDLEWARE pre('save')
// Antes de guardar cualquier documento de transacci√≥n, actualiza el campo lastUpdated
// Esto permite llevar un control autom√°tico de la √∫ltima modificaci√≥n del registro
transaccionPSESchema.pre("save", function (next) {
  // Asigna la fecha y hora actual al campo lastUpdated
  this.lastUpdated = new Date();
  next(); // Contin√∫a con el guardado
});

// ===============================
// üìà √çNDICES PARA OPTIMIZAR CONSULTAS
// Los √≠ndices mejoran el rendimiento de las b√∫squedas y filtrados frecuentes.
// No se duplican los √≠ndices √∫nicos ya definidos en los campos reference y achTransactionId.

// √çndice por estado de la transacci√≥n, √∫til para listar por estado (pendiente, aprobada, etc.)
transaccionPSESchema.index({ status: 1 });

// √çndice por fecha de creaci√≥n descendente, √∫til para mostrar las transacciones m√°s recientes primero
transaccionPSESchema.index({ createdAt: -1 });

// √çndice por correo electr√≥nico del usuario, √∫til para consultar el historial de pagos de un usuario
transaccionPSESchema.index({ userEmail: 1 });

// ===============================
// üì¶ EXPORTACI√ìN DEL MODELO
// Se exporta el modelo 'TransaccionPSE' basado en el esquema transaccionPSESchema.
// Esto permite que el modelo sea utilizado en otros m√≥dulos de la aplicaci√≥n para crear,
// consultar, actualizar y eliminar transacciones PSE en la base de datos MongoDB.
//
// Ejemplo de uso:
// const TransaccionPSE = require('./models/transaccionPSE');
// TransaccionPSE.find(...), TransaccionPSE.create(...), etc.
module.exports = mongoose.model("TransaccionPSE", transaccionPSESchema);
