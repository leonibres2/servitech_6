// ===============================
// 游늯 RUTA DE DEBUG DE ASESOR칈AS
// Este archivo define un endpoint temporal para depuraci칩n (debug) que permite
// consultar r치pidamente las 칰ltimas 10 asesor칤as registradas en el sistema.
// Cada l칤nea est치 documentada para explicar su prop칩sito y funcionamiento.
// ===============================

// Importa el framework Express para definir rutas HTTP
const express = require("express");

// Crea una nueva instancia de router de Express para agrupar rutas relacionadas
const router = express.Router();

// Importa el modelo Asesoria desde el archivo de modelos centralizados
const { Asesoria } = require("../models/models");

// ===============================
// 游뚾 ENDPOINT DE DEBUG: /debug/asesorias
// Permite obtener las 칰ltimas 10 asesor칤as creadas, ordenadas de la m치s reciente a la m치s antigua.
// 칔til para pruebas r치pidas y monitoreo durante el desarrollo.
router.get("/debug/asesorias", async (req, res) => {
  try {
    // Busca todas las asesor칤as, las ordena por fechaHora descendente y limita a 10 resultados
    const asesorias = await Asesoria.find({}) // Consulta sin filtros (todas las asesor칤as)
      .sort({ fechaHora: -1 }) // Ordena por fechaHora descendente (m치s reciente primero)
      .limit(10); // Limita a 10 resultados

    // Responde con un JSON que indica 칠xito y devuelve los datos encontrados
    res.json({ success: true, data: asesorias });
  } catch (err) {
    // Si ocurre un error, responde con c칩digo 500 y el mensaje de error
    res.status(500).json({ success: false, error: err.message });
  }
});

// ===============================
// 游닍 EXPORTACI칍N DEL ROUTER
// Exporta el router para que pueda ser utilizado en la configuraci칩n principal de rutas de la aplicaci칩n.
module.exports = router;
