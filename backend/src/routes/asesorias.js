/**
 * üõ£Ô∏è RUTAS DE ASESOR√çAS - SERVITECH
 * Define todas las rutas relacionadas con la gesti√≥n de asesor√≠as
 * Fecha: 6 de julio de 2025
 */

// ===============================
// üìÑ RUTAS DE ASESOR√çAS
// Este archivo define todas las rutas HTTP relacionadas con la gesti√≥n de asesor√≠as en el sistema.
// Cada l√≠nea est√° documentada para explicar su prop√≥sito, par√°metros y funcionamiento.
// ===============================

// Importa el framework Express para definir rutas HTTP
const express = require("express");

// Crea una nueva instancia de router de Express para agrupar rutas relacionadas
const router = express.Router();

// Importa los controladores de asesor√≠a desde el controlador centralizado
const {
  obtenerAsesorias, // Controlador para listar asesor√≠as con filtros
  obtenerAsesoria, // Controlador para obtener una asesor√≠a espec√≠fica
  crearAsesoria, // Controlador para crear una nueva asesor√≠a
  confirmarAsesoria, // Controlador para confirmar una asesor√≠a (experto)
  cancelarAsesoria, // Controlador para cancelar una asesor√≠a
  iniciarAsesoria, // Controlador para iniciar una asesor√≠a
  finalizarAsesoria, // Controlador para finalizar una asesor√≠a
  obtenerEstadisticas, // Controlador para obtener estad√≠sticas de asesor√≠as
  verificarDisponibilidadExperto, // Controlador para verificar disponibilidad de un experto
} = require("../controllers/asesoriaController");

// ===============================
// üîí MIDDLEWARE DE VALIDACI√ìN DE USUARIO
// Verifica que el usuario tenga una sesi√≥n activa antes de permitir el acceso a rutas protegidas.
// Si no hay sesi√≥n, responde con error 401 (no autenticado).
const validarUsuario = (req, res, next) => {
  // Obtiene el ID del usuario autenticado desde la sesi√≥n
  const usuarioId = req.session?.usuarioId;
  if (!usuarioId) {
    // Si no hay usuario autenticado, responde con error y mensaje explicativo
    return res.status(401).json({
      success: false,
      message: "Usuario no autenticado (sesi√≥n requerida)",
    });
  }
  // Si est√° autenticado, agrega el usuarioId al request para uso posterior
  req.usuarioId = usuarioId;
  next(); // Contin√∫a con la siguiente funci√≥n o controlador
};

// ===============================
// üö¶ RUTAS P√öBLICAS (acceso sin autenticaci√≥n, solo validaciones m√≠nimas)

/**
 * GET /api/asesorias
 * Ruta para obtener una lista de asesor√≠as, permite aplicar filtros por query params.
 * Query params: usuario, rol, estado, categoria, fechaDesde, fechaHasta, pagina, limite
 * Ejemplo: /api/asesorias?usuario=123&estado=pendiente
 */
router.get("/", obtenerAsesorias);

/**
 * GET /api/asesorias/estadisticas
 * Ruta para obtener estad√≠sticas agregadas de asesor√≠as.
 * Query params: usuarioId, rol, periodo
 * Ejemplo: /api/asesorias/estadisticas?usuarioId=123&periodo=30
 */
router.get("/estadisticas", obtenerEstadisticas);

/**
 * GET /api/asesorias/disponibilidad/:expertoId
 * Ruta para verificar la disponibilidad de un experto en una fecha y duraci√≥n espec√≠fica.
 * Params: expertoId
 * Query params: fecha, duracion
 * Ejemplo: /api/asesorias/disponibilidad/456?fecha=2025-07-22&duracion=60
 */
router.get("/disponibilidad/:expertoId", verificarDisponibilidadExperto);

/**
 * GET /api/asesorias/:id
 * Ruta para obtener los detalles de una asesor√≠a espec√≠fica por su ID.
 * Params: id (ID de la asesor√≠a)
 * Ejemplo: /api/asesorias/789
 */
router.get("/:id", obtenerAsesoria);

// ===============================
// üîê RUTAS PROTEGIDAS (requieren autenticaci√≥n de usuario)

/**
 * POST /api/asesorias
 * Ruta para crear una nueva asesor√≠a.
 * Body: expertoId, categoriaId, tipoServicio, titulo, descripcion, fechaHora, duracion, precio, metodoPago, requerimientos
 * El clienteId se toma autom√°ticamente de la sesi√≥n activa.
 */
router.post("/", validarUsuario, crearAsesoria);

/**
 * PUT /api/asesorias/:id/confirmar
 * Ruta para que el experto confirme una asesor√≠a asignada.
 * Params: id (ID de la asesor√≠a)
 * Body: expertoId
 */
router.put("/:id/confirmar", validarUsuario, confirmarAsesoria);

/**
 * PUT /api/asesorias/:id/cancelar
 * Ruta para cancelar una asesor√≠a (cliente o experto).
 * Params: id (ID de la asesor√≠a)
 * Body: usuarioId, motivo
 */
router.put("/:id/cancelar", validarUsuario, cancelarAsesoria);

/**
 * PUT /api/asesorias/:id/iniciar
 * Ruta para iniciar una asesor√≠a (cliente o experto).
 * Params: id (ID de la asesor√≠a)
 * Body: usuarioId
 */
router.put("/:id/iniciar", validarUsuario, iniciarAsesoria);

/**
 * PUT /api/asesorias/:id/finalizar
 * Ruta para finalizar una asesor√≠a (solo el experto puede finalizar).
 * Params: id (ID de la asesor√≠a)
 * Body: usuarioId, resumen, archivosEntregados
 */
router.put("/:id/finalizar", validarUsuario, finalizarAsesoria);

// ===============================
// ‚ö†Ô∏è MIDDLEWARE DE MANEJO DE ERRORES
// Captura y responde a errores ocurridos en cualquier ruta de asesor√≠as.
// Proporciona mensajes claros seg√∫n el tipo de error (validaci√≥n, cast, otros).

router.use((error, req, res, next) => {
  // Imprime el error en consola para depuraci√≥n
  console.error("Error en rutas de asesor√≠as:", error);

  // Si el error es de validaci√≥n de Mongoose, responde con 400 y detalles
  if (error.name === "ValidationError") {
    return res.status(400).json({
      success: false,
      message: "Error de validaci√≥n",
      details: Object.values(error.errors).map((err) => err.message),
    });
  }

  // Si el error es por un ID inv√°lido (CastError), responde con 400
  if (error.name === "CastError") {
    return res.status(400).json({
      success: false,
      message: "ID inv√°lido",
    });
  }

  // Para otros errores, responde con 500 y mensaje gen√©rico (o detalle en desarrollo)
  res.status(500).json({
    success: false,
    message: "Error interno del servidor",
    error:
      process.env.NODE_ENV === "development" ? error.message : "Error interno",
  });
});

// ===============================
// üì¶ EXPORTACI√ìN DEL ROUTER
// Exporta el router para que pueda ser utilizado en la configuraci√≥n principal de rutas de la aplicaci√≥n.
module.exports = router;
